BASE
====

This application has the mission to use django-reversion functions to make a
ForeignKey-like field to make foreign relationships to objects withouth lost
their informations as they were when the relation has made.

The version of Django this test and package were made for is 1.2.3 or higher

The functions of this application are basically the following ones:

- A new model field
- Its respective form field
- Its respective form widget

This is the common way to make a foreign relation:

    ----------------------------------                    -------------------
    |            Purchase            |------------------->|     Supplier    |
    ---------------------------------- 0..*          0..1 -------------------
    | supplier: ForeignKey(Supplier) |                    | primary_key     |
    | other fields...                |                    | other fields... |
    ----------------------------------                    -------------------

Thinking on some instances:

    - You are the store
    - Nike is a supplier
    - The first purchase you made from Nike was in 2010-03-10
    - So, at 2010-04-30 Nike changed their location
    - And now you made a new purshase
    - So, you have a problem: they are asking for a bigger payment for billing
    - But you know they were so much nearer to you than they were when you made the previous purchase
    - So, you are going to confirm their location some months ago
    - And you notice you haven't their location because it has changed
    - So, you have a problem

The problem: if supplier changed its location, sometime in the future nobody
will know where pur

The workflow of this application should be as following:

    ------------                                            ------------
    | Purchase |                                            | Supplier |
    ------------                                            ------------
          | 0..*                                                1 ^
          |                                                       |
          |             0..1 ------------------- 0..*             |
          ------------------>|     Version     |-------------------
              ForeignKey     -------------------  generic relation
                             | serialized JSON |
                             -------------------

Version is a class from django-reversion (reversion.models.Version).

The serialization is well-made by django-reversion but the ForeignKey you have to make
by yourself.

But the solution above is not enough, because:

    - The builtin ForeignKey model field will not return the Supplier's informations
      so easy as it works for direct relation
    - The default work of ForeignKey on forms (as form field as form widget) will also
      not work as we'd like.

So we need for:

    - A new extended ForeignKey model field: ReversionForeignKey
    - A new form field: ReversionChoiceField
    - A new widget: ReversionChoiceWidget

Application in PYTHONPATH (as pluggable as possible)
----------------------------------------------------

    >>> import reversion_relations

ReversionForeignKey
-------------------

    >>> from reversion_relations.fields import ReversionForeignKey

    >>> from reversion_relations.tests.test_models import Supplier, Purchase, create_tables
    >>> create_tables()

    >>> import datetime

    >>> nike = Supplier.objects.create(name='Nike', location='Av. Paulista, Centro, Sao Paulo - SP')
    >>> grendene = Supplier.objects.create(name='Grendene', location='Rua Joao da Silva, Centro, Belo Horizonte - MG')

The first purchase was joined to supplier when it had a location...

    >>> purchase1 = Purchase.objects.create(supplier=nike, date=datetime.date(2010, 3, 10))

    >>> nike.location = 'Av. Brasil, Centro, Rio de Janeiro - RJ'
    >>> nike.save()

And the second purchase was joined after supplier changed its location

    >>> purchase2 = Purchase.objects.create(supplier=nike, date=datetime.date(2010, 4, 30))

Setting supplier on a new object, before save...

    >>> purchase3 = Purchase()
    >>> purchase3.supplier = nike
    >>> purchase3.date = datetime.date(2010, 5, 9)

It is just the related object

    >>> purchase3.supplier
    <Supplier: Nike>

    >>> purchase3.save()

Checking after saved

    >>> purchase3.supplier
    <Supplier: Nike>

Getting objects again...

    >>> nike = Supplier.objects.get(pk=nike.pk)
    >>> purchase1 = Purchase.objects.get(pk=purchase1.pk)
    >>> purchase2 = Purchase.objects.get(pk=purchase2.pk)

    >>> nike.location
    u'Av. Brasil, Centro, Rio de Janeiro - RJ'

    >>> repr(purchase1.supplier) == '<ReversionProxy: supplier #%s>' % nike.pk
    True

    >>> print(purchase1.supplier)
    Nike

    >>> purchase1.supplier.location
    u'Av. Paulista, Centro, Sao Paulo - SP'

    >>> repr(purchase2.supplier) == '<ReversionProxy: supplier #%s>' % nike.pk
    True

    >>> print(purchase2.supplier)
    Nike

    >>> purchase2.supplier.location
    u'Av. Brasil, Centro, Rio de Janeiro - RJ'

ReversionChoiceField and ReversionChoiceWidget
----------------------------------------------

    >>> from reversion_relations.fields import ReversionChoiceField, ReversionChoiceWidget
    >>> from django import forms

    >>> field = ReversionChoiceField(queryset=None, initial=grendene.pk)

    >>> field.widget.__class__.__name__ == 'ReversionChoiceWidget'
    True

This should work on single view and admin, because both use Django's forms API

    >>> class FormPurchase(forms.ModelForm):
    ...     class Meta:
    ...         model = Purchase

    >>> FormPurchase.base_fields['supplier'].__class__.__name__ == 'ReversionChoiceField'
    True

    >>> form1 = FormPurchase()

    >>> form1.fields['supplier'].__class__.__name__ == 'ReversionChoiceField'
    True

    >>> print form1['supplier']
    <select name="supplier" id="id_supplier">
    <option value="" selected="selected">---------</option>
    <option value="1">Nike</option>
    <option value="2">Grendene</option>
    </select>

    >>> form2 = FormPurchase(instance=purchase1)
   
    >>> print form2['supplier']
    <select name="supplier" id="id_supplier">
    <option value="">---------</option>
    <option value="1" selected="selected">Nike</option>
    <option value="2">Grendene</option>
    </select>

    >>> form3 = FormPurchase({'supplier': unicode(grendene.pk), 'date':'2010-06-21'})
    >>> form3.is_valid()
    True

    >>> purchase4 = form3.save()
    >>> purchase4.supplier == grendene
    True

Testing location changed

    >>> purchase4.supplier.location
    u'Rua Joao da Silva, Centro, Belo Horizonte - MG'

    >>> grendene.location = 'Av. do Contorno, Lagoinha, Belo Horizonte - MG'
    >>> grendene.save()

Not changed...

    >>> purchase4.supplier.location == u'Rua Joao da Silva, Centro, Belo Horizonte - MG'
    True

    >>> purchase4.save()

Not changed...

    >>> purchase4.supplier.location == u'Rua Joao da Silva, Centro, Belo Horizonte - MG'
    True

    >>> form4 = FormPurchase({'supplier': unicode(grendene.pk), 'date':'2010-06-23'}, instance=purchase4)
    >>> form4.is_valid()
    True

    >>> purchase5 = form4.save()

Not changed...

    >>> purchase4.supplier.location == u'Rua Joao da Silva, Centro, Belo Horizonte - MG'
    True

Just now it has been changed

    >>> purchase5.supplier = grendene
    >>> purchase5.save()

    >>> purchase4.supplier.location == u'Av. do Contorno, Lagoinha, Belo Horizonte - MG'
    True

Reversed attribute related (something_set)
------------------------------------------

This function is not so full as Django does. If we have necessity we can enhance it to
support creating and clearing objects.

    >>> from django.contrib.contenttypes.models import ContentType

    >>> from_related_manager = nike.purchase_set.order_by('pk').values()
    >>> from_common_way = Purchase.objects.filter(
    ...     supplier__content_type=ContentType.objects.get_for_model(Supplier),
    ...     supplier__object_id=nike.pk,
    ... ).order_by('pk').values()

    >>> list(from_related_manager) == list(from_common_way)
    True
    
    True

